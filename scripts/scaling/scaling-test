#!/bin/bash

set -eux

tmpdir=$(mktemp -d /tmp/mysql_scaling.XXXXX)
trap '{ rm -rf ${tmpdir}; }' EXIT

function close-ssh-tunnels() {
  echo "Closing SSH tunnels ..."
  OLD_TUNNELS=`ps aux | grep "ssh" | \
    grep "\-L 43306 \| \-L 43307 \| \-L 43308" | \
    awk '{print $2}'`
  [[ -z "${OLD_TUNNELS}" ]] || kill ${OLD_TUNNELS}
}

function setup_infrastructure_variables() {
  pushd "${WORKSPACE_DIR}"
    source ${CI_DIR}/scripts/utils.sh

    : "${ENV_TARGET_FILE:?}"
    : "${ENV_METADATA:?}"
    : "${BOSH_LITE_SSH_KEY:?}"

    DIRECTOR_IP=$(cat "${ENV_TARGET_FILE}")

    BOSH_USER="$(jq_val "bosh_user" "${ENV_METADATA}")"
    BOSH_PASSWORD="$(jq_val "bosh_password" "${ENV_METADATA}")"

    TUNNEL_HOST="127.0.0.1"
    # exclude arbitrator (10.244.8.2)
    TUNNEL_PORTS=("43306" "43307")
    MYSQL_IPS=("10.244.7.2" "10.244.8.2")

    BOSH_LITE_SSH_KEY_FILE="/tmp/id_rsa"
    echo "${BOSH_LITE_SSH_KEY}" > "${BOSH_LITE_SSH_KEY_FILE}"
    chmod 600 "${BOSH_LITE_SSH_KEY_FILE}"

    trap close-ssh-tunnels EXIT
    for i in $(seq 0 1); do
      PORT=${TUNNEL_PORTS[$i]}
      MYSQL_IP=${MYSQL_IPS[$i]}
      ssh -L ${PORT}:${MYSQL_IP}:3306 \
        -NnTf \
        -i "${BOSH_LITE_SSH_KEY_FILE}" \
        -o StrictHostKeyChecking=no \
        "ubuntu@${DIRECTOR_IP}"
    done
  popd
}

function verify_replicated_row_count_is() {
  NODE_PORT=43306
  pushd "${MY_DIR}"
    for node_index in $(seq 0 1); do
      PORT=${TUNNEL_PORTS[$node_index]}
      MYSQL_IP=${MYSQL_IPS[$node_index]}
      NODE_COUNT=$(bundle exec ruby mariadb_crud.rb select --host ${MYSQL_IP} --port ${PORT})
      if [[ "${NODE_COUNT}" != $1 ]]; then
        echo "Node ${node_index} did write data correctly:"
        echo "Expected count: $1"
        echo "Actual count: $NODE_COUNT"
        exit 1
      fi
    done
  popd
}

function scale_down() {
  echo "Scaling down to minimal deployment"

  MANIFEST_FILE="${tmpdir}/bosh_lite_manifest.yml"
  MINIMAL_MODE=true \
    OUTPUT_FILE="${MANIFEST_FILE}" \
    ${CI_DIR}/scripts/bosh-lite/make_manifest

  bosh deployment "${MANIFEST_FILE}"
  bosh -n deploy
}

function scale_up() {
  echo "Scaling to up to full deployment"
  MANIFEST_FILE="${tmpdir}/bosh_lite_manifest.yml"

  MINIMAL_MODE=false \
  OUTPUT_FILE="${MANIFEST_FILE}" \
    ${CI_DIR}/scripts/bosh-lite/make_manifest

  bosh deployment "${MANIFEST_FILE}"
  bosh -n deploy
}

function write_some_data() {
  pushd "${MY_DIR}"
    echo "Writing some data to Node 0"
    bundle exec ruby mariadb_crud.rb insert $1 --host "${NODE_IP}" --port "${NODE_PORT}"
  popd
}

function verify_first_node_row_count_is() {
  pushd "${MY_DIR}"
    PORT=${TUNNEL_PORTS[0]}
    MYSQL_IP=${MYSQL_IPS[0]}
    NODE_COUNT=$(bundle exec ruby mariadb_crud.rb select --host "${MYSQL_IP}" --port "${PORT}")
    if [ ! "${NODE_COUNT}" -eq $1 ] ; then
      echo "Expected record count is not equal to ${NODE_COUNT}"
      exit 1
    fi
  popd
}

function clear_data() {
  pushd "${MY_DIR}"
    PORT=${TUNNEL_PORTS[0]}
    MYSQL_IP=${MYSQL_IPS[0]}
    echo "Removing test data from Node 0"
    bundle exec ruby mariadb_crud.rb delete --host "${MYSQL_IP}" --port "${PORT}"
  popd
}

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CI_DIR="$( cd "${MY_DIR}/../../" && pwd )"
WORKSPACE_DIR="$( cd "${MY_DIR}/../../../" && pwd )"

setup_infrastructure_variables

pushd "${MY_DIR}"
  bundle install
popd

bosh -n target "${DIRECTOR_IP}"
bosh -n login "${BOSH_USER}" "${BOSH_PASSWORD}"

scale_down
clear_data
write_some_data 1000

scale_up
verify_replicated_row_count_is 1000

scale_down
write_some_data 1000
verify_first_node_row_count_is 2000

echo "Success!"
