#!/bin/bash

set -eux

function close-ssh-tunnels() {
  echo "Closing SSH tunnels ..."
  OLD_TUNNELS=`ps aux | grep "ssh" | \
    grep \-L 43306 \| \-L 43307 \| \-L 43308 | \
    awk '{print $2}'`
  [[ -z "${OLD_TUNNELS}" ]] || kill ${OLD_TUNNELS}
}

function setup_infrastructure_variables() {
  pushd "${WORKSPACE_DIR}"
    source ${CI_DIR}/scripts/utils.sh

    : "${ENV_TARGET_FILE:?}"
    : "${ENV_METADATA:?}"
    : "${BOSH_LITE_SSH_KEY:?}"

    DIRECTOR_IP=$(cat "${ENV_TARGET_FILE}")

    BOSH_USER="$(jq_val "bosh_user" "${ENV_METADATA}")"
    BOSH_PASSWORD="$(jq_val "bosh_password" "${ENV_METADATA}")"

    NODE_IP="127.0.0.1"

    NODE_PORT=43306

    BOSH_LITE_SSH_KEY_FILE="/tmp/id_rsa"
    echo "${BOSH_LITE_SSH_KEY}" > "${BOSH_LITE_SSH_KEY_FILE}"
    chmod 600 "${BOSH_LITE_SSH_KEY_FILE}"

    trap close-ssh-tunnels EXIT
    for nodeOctet in $(seq 7 9); do
      MYSQL_NODE=$"10.244.${nodeOctet}.2"
      if [[ $nodeOctet == 9 ]]; then
        MYSQL_NODE=$"10.244.${nodeOctet}.6"
      fi

      ssh -L ${NODE_PORT}:${MYSQL_NODE}:3306 \
        -NnTf \
        -i "${BOSH_LITE_SSH_KEY_FILE}" \
        -o StrictHostKeyChecking=no \
        "ubuntu@${DIRECTOR_IP}"

      NODE_PORT=$[NODE_PORT+1]
    done

    NODE_PORT=43306
  popd
}

function verify_replicated_row_count_is() {
  NODE_PORT=43306
  pushd "${MY_DIR}"
    for nodeIndex in $(seq 0 2); do
      NODE_COUNT=$(bundle exec ruby mariadb_crud.rb select --host ${NODE_IP} --port $NODE_PORT)
      if [[ "${NODE_COUNT}" != $1 ]]; then
        echo "Node ${nodeIndex} did write data correctly:"
        echo "Expected count: $1"
        echo "Actual count: $NODE_COUNT"
        exit 1
      fi
      NODE_PORT=$[NODE_PORT+1]
    done

  popd
  NODE_PORT=43306
}

function scale_to() {
  echo "Scaling to $1 nodes"
  export NODE_COUNT=$1
  export OUTPUT_FILE="deployment.yml"
  ${CI_DIR}/scripts/bosh-lite/make_manifest
  update_director_uuid
  bosh deployment "${WORKSPACE_DIR}/${OUTPUT_FILE}"
  bosh -n deploy
}

function write_some_data() {
  pushd "${MY_DIR}"
    echo "Writing some data to Node 0"
    bundle exec ruby mariadb_crud.rb insert $1 --host "${NODE_IP}" --port "${NODE_PORT}"
  popd
}

function verify_first_node_row_count_is() {
  pushd "${MY_DIR}"
    NODE_COUNT=$(bundle exec ruby mariadb_crud.rb select --host "${NODE_IP}" --port "${NODE_PORT}")
    if [ ! "${NODE_COUNT}" -eq $1 ] ; then
      echo "Expected record count is not equal to ${NODE_COUNT}"
      exit 1
    fi
  popd
}

function clear_data() {
  pushd "${MY_DIR}"
    echo "Removing test data from Node 0"
    bundle exec ruby mariadb_crud.rb delete --host "${NODE_IP}" --port "${NODE_PORT}"
  popd
}

function update_director_uuid (){
  DIRECTOR_UUID=$(bosh status | grep UUID | awk '{print $2}')
  echo ${DIRECTOR_UUID}
  sed -i.bak 's/director_uuid: null/director_uuid: '"${DIRECTOR_UUID}"'/' ${OUTPUT_FILE}
}

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CI_DIR="$( cd "${MY_DIR}/../../" && pwd )"
WORKSPACE_DIR="$( cd "${MY_DIR}/../../../" && pwd )"

setup_infrastructure_variables

pushd "${MY_DIR}"
  bundle install
popd

bosh -n target "${DIRECTOR_IP}"
bosh -n login "${BOSH_USER}" "${BOSH_PASSWORD}"

scale_to 1
clear_data
write_some_data 1000

scale_to 3
verify_replicated_row_count_is 1000

scale_to 1
write_some_data 1000
verify_first_node_row_count_is 2000

echo "Success!"
