#!/bin/bash

# DEPRECATED
# This is the old bosh 1.0 style manifest generation. Use make-manifest-ondemand instead!

set -eux

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CI_DIR="$( cd ${MY_DIR}/../.. && pwd )"
WORKSPACE_DIR="$( cd ${CI_DIR}/.. && pwd )"
RELEASE_DIR="$( cd ${WORKSPACE_DIR}/cf-mysql-release && pwd )"

source ${CI_DIR}/scripts/utils.sh

tmpdir=$(mktemp -d /tmp/mysql_manifest.XXXXX)
trap '{ rm -rf ${tmpdir}; }' EXIT

: "${OUTPUT_FILE:?}"
: "${ENV_TARGET_FILE:?}"
: "${ENV_METADATA:?}"
: "${MINIMAL_MODE:=false}"
: "${STANDALONE_MODE:=false}"
: "${NO_ARBITRATOR:=false}"
: "${FULL_PLUS_ARBITRATOR:=false}"
: "${TINY_GCACHE:=false}"
: "${DISABLE_PARANOIA:=false}"
: "${NOTIFICATIONS_DB:=false}"

if [[ "${OUTPUT_FILE}" != /* ]]; then
  OUTPUT_FILE="${WORKSPACE_DIR}/${OUTPUT_FILE}"
fi

pushd "${WORKSPACE_DIR}"
  DIRECTOR_IP=$(cat "${ENV_TARGET_FILE}")

  BOSH_CLIENT="$(jq_val "bosh_user" "${ENV_METADATA}")"
  BOSH_CLIENT_SECRET="$(jq_val "bosh_password" "${ENV_METADATA}")"

  CF_API_USER="$(jq_val "cf_api_user" "${ENV_METADATA}")"
  CF_API_PASSWORD="$(jq_val "cf_api_password" "${ENV_METADATA}")"
popd

CF_MANIFEST="${tmpdir}/cf-warden.yml"
if [ "${STANDALONE_MODE}" = false ] ; then
  bosh -n target "${DIRECTOR_IP}"
  bosh -n login "${BOSH_CLIENT}" "${BOSH_CLIENT_SECRET}"

  bosh -n download manifest cf-warden "${CF_MANIFEST}"
else
  sed -e "s/REPLACE_WITH_DIRECTOR_UUID/~/g" \
    -e "s/REPLACE_WITH_CF_DEPLOYMENT_NAME/cf-warden/g" \
    "${RELEASE_DIR}/manifest-generation/examples/standalone/standalone-cf-manifest.yml" \
    > "${CF_MANIFEST}"
fi

PROPERTY_OVERRIDES="${RELEASE_DIR}/manifest-generation/bosh-lite-stubs/property-overrides.yml"
IAAS_SETTINGS="${RELEASE_DIR}/manifest-generation/bosh-lite-stubs/iaas-settings.yml"
INSTANCE_COUNT_OVERRIDE="${RELEASE_DIR}/manifest-generation/examples/instance-count-overrides.yml"

if [ "${STANDALONE_MODE}" = "true" ]; then
  PROPERTY_OVERRIDES="${RELEASE_DIR}/manifest-generation/bosh-lite-stubs/property-overrides-standalone.yml"
  INSTANCE_COUNT_OVERRIDE="${RELEASE_DIR}/manifest-generation/examples/standalone/instance-count-overrides.yml"
elif [ "${MINIMAL_MODE}" = "true" ]; then
  INSTANCE_COUNT_OVERRIDE="${RELEASE_DIR}/manifest-generation/examples/minimal/instance-count-overrides.yml"
elif [ "${NO_ARBITRATOR}" = "true" ]; then
  INSTANCE_COUNT_OVERRIDE="${RELEASE_DIR}/manifest-generation/examples/no-arbitrator/instance-count-overrides.yml"
elif [ "${FULL_PLUS_ARBITRATOR}" = "true" ]; then
  INSTANCE_COUNT_OVERRIDE="${RELEASE_DIR}/manifest-generation/examples/upgrade-to-arbitrator/deploy-arbitrator/instance-count-overrides.yml"
fi

if [ "${TINY_GCACHE}" = "true" ]; then
  PROPERTY_OVERRIDES="$PROPERTY_OVERRIDES ${CI_DIR}/stubs/property-overrides-tiny-gcache.yml"
fi

if [ "${DISABLE_PARANOIA}" = "true" ]; then
  PROPERTY_OVERRIDES="$PROPERTY_OVERRIDES ${CI_DIR}/stubs/property-overrides-disable-paranoia.yml"
fi

if [ "${NOTIFICATIONS_DB}" = "true" ]; then
  PROPERTY_OVERRIDES="$PROPERTY_OVERRIDES ${CI_DIR}/stubs/notifications-db.yml"
fi

CF_CREDENTIALS_STUB="${tmpdir}/cf-credentials-overrides.yml"
cat > ${CF_CREDENTIALS_STUB} <<EOF
director_uuid: $(bosh status --uuid)
property_overrides:
  cf:
    admin_username: ${CF_API_USER}
    admin_password: ${CF_API_PASSWORD}
EOF

PROPERTY_OVERRIDES="$PROPERTY_OVERRIDES ${CF_CREDENTIALS_STUB}"

"${RELEASE_DIR}/scripts/generate-deployment-manifest" \
  -c "${CF_MANIFEST}" \
  -p "${PROPERTY_OVERRIDES}" \
  -i "${IAAS_SETTINGS}" \
  -n "${INSTANCE_COUNT_OVERRIDE}" \
  > "${OUTPUT_FILE}"
