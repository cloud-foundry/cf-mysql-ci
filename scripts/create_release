#!/bin/bash

set -eux

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WORKSPACE_DIR="$( cd "${MY_DIR}/../.." && pwd )"

: "${RELEASE_NAME:?}"

default_release_name="${RELEASE_NAME}-release"
RELEASE_DIR="${WORKSPACE_DIR}/${RELEASE_RELATIVE_DIR:-${default_release_name}}"
OUTPUT_DIR="${WORKSPACE_DIR}/${OUTPUT_DIR:-release-tarball}"
TAG_MATCH=${TAG_MATCH:-}
FINAL=${FINAL:-}

pushd "${RELEASE_DIR}"

    # If we don't specify the release version manually,
    # Bosh will choose a version number based on what
    # versions are already on the local machine.
    # If the local machine has no existing versions
    # (e.g. the machine is newly created from a Docker image),
    # Bosh will start at Version 0. The problem is that
    # the bosh director we are targeting may already have a
    # Version 0 uploaded, so Bosh will not upload our changes.
    # Manually adding a timestamp to the version number fixes this.
    # We also include the latest OSS release tag in the version for clarity.
    if [ -n "${TAG_MATCH}" ]; then
      git_describe_output=$(git describe --long --tags --match ${TAG_MATCH})
    else
      git_describe_output=$(git describe --long --tags)
    fi
    git_describe_output="${git_describe_output#v}" # remove leading 'v'

    major=$(echo ${git_describe_output} | cut -f1 -d-)
    minor=$(echo ${git_describe_output} | cut -f2 -d-)
    sha=$(echo ${git_describe_output} | cut -f3 -d-)

    if [ -n "${FINAL}" ]; then
      version=$major.$minor
    else
      version=$major.$minor+$sha
    fi

    create_release_command="bosh -n create release --name "${RELEASE_NAME}" --version ${version} --with-tarball --force"

    set +e
    create_release_output=$(${create_release_command} 2>&1)
    create_release_exit_code=$?
    set -e

    if [ "${create_release_exit_code}" -ne 0 ]; then
      # retry on blobstore error, else exit

      # turn off trace to avoid printing output twice
      set +x
      if [[ "${create_release_output}" == *"Blobstore error"* ]]; then
        set -x
        ${create_release_command}
        cp "dev_releases/${RELEASE_NAME}/${RELEASE_NAME}"-*.tgz ${OUTPUT_DIR}/
      else
        set -x
        exit "${create_release_exit_code}"
      fi
    else
      cp dev_releases/"${RELEASE_NAME}"/"${RELEASE_NAME}"-*.tgz ${OUTPUT_DIR}/
    fi
popd
