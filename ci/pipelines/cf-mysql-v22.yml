---
#
# Equivalent of the cf-mysql pipeline, but tied to the v22 branch.
#

### RESOURCES
resources:
- name: aws-bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: bosh-lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent
    version_family: 3312.latest

- name: deployments-configuration
  type: git
  source:
    uri: git@github.com:pivotal-cf/deployments-core-services
    private_key: {{git-private-key}}

- name: cf-mysql-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/cf-mysql-ci.git

- name: cf-mysql-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-mysql-release.git
    branch: releases/v22
    private_key: {{git-writer-private-key}}

- name: aws-deployment
  type: bosh-deployment
  source:
    username: {{aws_bosh_username}}
    password: {{aws_bosh_password}}
    deployment: cf-mysql
    ignore_ssl: true

- name: bosh-lite-deployment
  type: bosh-deployment
  source:
    username: {{bosh-lite-username}}
    password: {{bosh-lite-password}}
    deployment: cf-mysql
    ignore_ssl: true

- name: aws-environment
  type: pool
  source:
    uri: &pool-uri git@github.com:pivotal-cf-experimental/core-services-oss-env-resource-pool
    branch: master
    pool: aws
    private_key: {{git-writer-private-key}}

- name: bosh-lite-environment
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: bosh-lites-working
    private_key: {{git-writer-private-key}}

- name: weekly-trigger
  type: time
  source:
    days:
    - Monday
    interval: 24h

- name: pcf-mysql-rc-artifacts
  type: s3
  source:
    bucket: pcf-mysql-releases
    access_key_id: {{pcf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{pcf-mysql-ci-aws-secret-access-key}}
    regexp: releases-22/tested/cf-mysql-(.*).tgz

- name: bosh-lite-repo
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-lite.git
    branch: master

- name: version
  type: semver
  source:
    driver: s3
    bucket: cf-mysql-releases
    access_key_id: {{cf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{cf-mysql-ci-aws-secret-access-key}}
    key: version-v22

### JOBS
jobs:
- name: test-unit
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
    - get: weekly-trigger
      trigger: true
    - get: old_version
      resource: version
      params:
        pre: rc
  - task: test-unit
    config:
      platform: &platform linux
      image_resource: &image_resource
        type: docker-image
        source:
          repository: cloudfoundry/cf-mysql-ci
      inputs:
      - name: cf-mysql-release
      run:
        path: cf-mysql-release/scripts/test-unit
  - task: test-sample-stubs
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-release
      run:
        path: cf-mysql-release/scripts/test-sample-stubs
  - put: version
    params:
      file: old_version/version

- name: deploy-to-full-bosh
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-unit]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: aws-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: deployments-configuration
    - get: aws-bosh-stemcell
    - get: version
      passed: [test-unit]
  - try:
      task: run-deregister-and-purge-instances
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: deregister-and-purge-instances
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment
  - aggregate:
    - &create-release
      task: create-release
      file: cf-mysql-ci/ci/tasks/create-release.yml
      input_mapping: {release-repo: cf-mysql-release}
      params:
        RELEASE_NAME: cf-mysql
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: deployments-configuration
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: aws-environment
        outputs:
        - name: deployment-manifest
        params:
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          DEPLOYMENTS_DIR: deployments-configuration
          RUN_ALL_ACCEPTANCE_TESTS: true
        run:
          path: cf-mysql-ci/scripts/bosh/make_manifest
  - put: aws-deployment
    params:
      target_file: aws-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [release-tarball/*.tgz]
      stemcells: [aws-bosh-stemcell/*.tgz]

- name: test-full-bosh
  plan:
  - aggregate:
    - get: aws-environment
      passed: [deploy-to-full-bosh]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [deploy-to-full-bosh]
    - get: cf-mysql-ci
    - get: deployments-configuration
    - get: version
      passed: [deploy-to-full-bosh]
  - task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-acceptance-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: acceptance-tests
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: dashboard-test
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        TEST_TYPE: dashboard
      run:
        path: cf-mysql-ci/scripts/acceptance-tests
  - try:
      task: run-deregister-and-purge-instances
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: deregister-and-purge-instances
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment
  - put: aws-environment
    params:
      release: aws-environment

### SCALING
- name: deploy-to-scaling
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-unit]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: version
      passed: [test-unit]
  - &deregister-and-purge-instances-bosh-lite
    try:
      task: run-deregister-and-purge-instances
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
          - name: bosh-lite-repo
        params:
          BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          ERRAND: deregister-and-purge-instances
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - &delete-deployment-bosh-lite
    aggregate:
    - task: delete-cf-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment
    - task: delete-cf-warden-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment
  - aggregate:
    - *create-release
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: bosh-lite-environment
        outputs:
          - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          MINIMAL_MODE: true
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - &deploy-to-bosh-lite
    put: bosh-lite-deployment
    params:
      target_file: bosh-lite-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [release-tarball/*.tgz]
      stemcells: [bosh-lite-stemcell/*.tgz]
  - &broker-registrar-bosh-lite
    task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: bosh-lite-repo
      params:
        BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: test-scaling
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-scaling]
    - get: bosh-lite-environment
      passed: [deploy-to-scaling]
      trigger: true
      version: every
    - get: bosh-lite-repo
    - get: version
      passed: [deploy-to-scaling]
  - &smoke-tests-bosh-lite
    task: run-smoke-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: bosh-lite-repo
      params:
        BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: acceptance-tests
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-scaling-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### FAILOVER
- name: deploy-to-failover
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-unit]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: version
      passed: [test-unit]
  - *deregister-and-purge-instances-bosh-lite
  - *delete-deployment-bosh-lite
  - aggregate:
    - *create-release
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: bosh-lite-environment
        outputs:
          - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite
  - *broker-registrar-bosh-lite

- name: test-failover
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-failover]
    - get: bosh-lite-environment
      passed: [deploy-to-failover]
      trigger: true
      version: every
    - get: bosh-lite-repo
    - get: version
      passed: [deploy-to-failover]
  - *smoke-tests-bosh-lite
  - task: run-failover-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/failover/failover-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

- name: upload-rc-artifacts
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - test-full-bosh
      - test-failover
      - test-scaling
      trigger: true
    - get: cf-mysql-ci
    - get: version
      passed:
      - test-full-bosh
      - test-failover
      - test-scaling
  - task: create-rc-release-artifacts
    input_mapping: {release-repo: cf-mysql-release}
    file: cf-mysql-ci/ci/tasks/create-release.yml
    params:
      RELEASE_NAME: cf-mysql
  - put: pcf-mysql-rc-artifacts
    params:
      file: release-tarball/cf-mysql*.tgz

- name: bump-minor
  plan:
  - aggregate:
    - get: version
      params:
        bump: minor
        pre: rc
  - put: version
    params:
      file: version/version
