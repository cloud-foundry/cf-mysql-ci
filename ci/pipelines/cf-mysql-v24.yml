---
#
# Equivalent of the cf-mysql pipeline, but tied to the v24 branch.
#

### RESOURCES
resources:
- name: aws-bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: bosh-lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent

- name: deployments-configuration
  type: git
  source:
    uri: git@github.com:pivotal-cf/deployments-core-services
    private_key: {{git-private-key}}

- name: cf-mysql-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/cf-mysql-ci.git

- name: cf-mysql-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-mysql-release.git
    branch: releases/v24
    private_key: {{git-writer-private-key}}

- name: aws-deployment
  type: bosh-deployment
  source:
    username: {{aws_bosh_username}}
    password: {{aws_bosh_password}}
    deployment: cf-mysql
    ignore_ssl: true

- name: bosh-lite-deployment
  type: bosh-deployment
  source:
    username: {{bosh-lite-username}}
    password: {{bosh-lite-password}}
    deployment: cf-warden-mysql
    ignore_ssl: true

- name: aws-environment
  type: pool
  source:
    uri: &pool-uri git@github.com:pivotal-cf-experimental/core-services-oss-env-resource-pool
    branch: master
    pool: aws
    private_key: {{git-writer-private-key}}

- name: bosh-lite-environment
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: bosh-lites-working
    private_key: {{git-writer-private-key}}

- name: compiled-packages-lock
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: compiled-packages
    private_key: {{git-writer-private-key}}

- name: weekly-trigger
  type: time
  source:
    days:
    - Monday
    interval: 24h

- name: pcf-mysql-rc-artifacts
  type: s3
  source:
    bucket: pcf-mysql-releases
    access_key_id: {{pcf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{pcf-mysql-ci-aws-secret-access-key}}
    regexp: releases-24/tested/cf-mysql-(.*).tgz

- name: cf-mysql-compiled-release
  type: s3
  source:
    bucket: cf-mysql-releases
    access_key_id: {{cf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{cf-mysql-ci-aws-secret-access-key}}
    versioned_file: compiled-releases/cf-mysql-ubuntu-trusty-v24.tgz

- name: bosh-lite-repo
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-lite.git
    branch: master

- name: version
  type: semver
  source:
    driver: s3
    bucket: cf-mysql-releases
    access_key_id: {{cf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{cf-mysql-ci-aws-secret-access-key}}
    key: version-v24
    initial_version: 24.11.0

### JOBS
jobs:
- name: bump-minor
  plan:
  - aggregate:
    - get: version
      params:
        bump: minor
        pre: rc
  - put: version
    params:
      file: version/version

- name: test-unit
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
    - get: weekly-trigger
      trigger: true
    - get: cf-mysql-ci
    - get: old_version
      resource: version
      params:
        pre: rc
  - aggregate:
    - task: test-unit
      file: cf-mysql-ci/ci/tasks/test-unit.yml
      attempts: 5
    - task: test-broker
      file: cf-mysql-ci/ci/tasks/test-broker.yml
    - task: test-broker-dependencies
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.3.1'
        inputs:
        - name: cf-mysql-release
        run:
          path: bash
          args:
          - -c
          - |
            set -eux

            gem install bundler-audit
            bundle-audit update

            cd cf-mysql-release/src/cf-mysql-broker

            bundle-audit
    - task: test-sample-stubs
      file: cf-mysql-ci/ci/tasks/test-sample-stubs.yml
  - put: version
    params:
      file: old_version/version

- name: create-and-compile-release
  serial: true
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
      passed:
        - test-unit
    - get: weekly-trigger
      trigger: true
      passed:
        - test-unit
    - get: cf-mysql-ci
    - get: aws-bosh-stemcell
    - get: version
      passed: [test-unit]
  - task: create-release
    config:
      platform: &platform linux
      image_resource: &image_resource
        type: docker-image
        source:
          repository: cloudfoundry/cf-mysql-ci
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: version
      outputs:
      - name: release-tarball
      params:
        RELEASE_NAME: cf-mysql
        TAG_MATCH: v24
      run:
        path: cf-mysql-ci/scripts/create_release
  - put: compiled-packages-lock
    params:
      acquire: true
  - task: compile-release
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: release-tarball
      - name: aws-bosh-stemcell
      outputs:
      - name: compiled-release-tarball
      params:
        BOSH_CLIENT: {{bosh_compilation_username}}
        BOSH_CLIENT_SECRET: {{bosh_compilation_password}}
        BOSH_DIRECTOR: {{bosh_compilation_director}}
      run:
        path: cf-mysql-ci/scripts/compile_release
    ensure:
      put: compiled-packages-lock
      params:
        release: compiled-packages-lock
  - put: cf-mysql-compiled-release
    params:
      file: compiled-release-tarball/*.tgz

### AWS
- name: deploy-to-full-bosh
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: aws-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: deployments-configuration
    - get: aws-bosh-stemcell
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - try:
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: broker-deregistrar
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: deployments-configuration
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: aws-environment
      outputs:
      - name: deployment-manifest
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENTS_DIR: deployments-configuration
        RUN_ALL_ACCEPTANCE_TESTS: true
      run:
        path: cf-mysql-ci/scripts/bosh/make_manifest
  - put: aws-deployment
    params:
      target_file: aws-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [compiled-release-tarball/*.tgz]
      stemcells: [aws-bosh-stemcell/*.tgz]

- name: test-full-bosh
  plan:
  - aggregate:
    - get: aws-environment
      passed: [deploy-to-full-bosh]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [deploy-to-full-bosh]
    - get: cf-mysql-ci
    - get: deployments-configuration
    - get: version
      passed: [deploy-to-full-bosh]
  - task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-acceptance-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
      params:
        ENV_REPO: deployments-configuration
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: acceptance-tests
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: dashboard-test
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        TEST_TYPE: dashboard
      run:
        path: cf-mysql-ci/scripts/acceptance-tests
  - try:
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        - name: deployments-configuration
        params:
          ENV_REPO: deployments-configuration
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: broker-deregistrar
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment
  - put: aws-environment
    params:
      release: aws-environment

### SCALING
- name: deploy-to-scaling
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - &broker-deregistrar-bosh-lite
    try:
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
          - name: bosh-lite-repo
        params:
          BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          ERRAND: broker-deregistrar
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - &delete-deployment-bosh-lite
    aggregate:
    - task: delete-cf-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment
    - task: delete-cf-warden-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        MINIMAL_MODE: true
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - &deploy-to-bosh-lite
    put: bosh-lite-deployment
    params:
      target_file: bosh-lite-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [compiled-release-tarball/*.tgz]
      stemcells: [bosh-lite-stemcell/*.tgz]
  - &broker-registrar-bosh-lite
    task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: bosh-lite-repo
      params:
        BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: test-scaling
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-scaling]
    - get: bosh-lite-environment
      passed: [deploy-to-scaling]
      trigger: true
      version: every
    - get: bosh-lite-repo
    - get: version
      passed: [deploy-to-scaling]
  - &smoke-tests-bosh-lite
    task: run-smoke-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: bosh-lite-repo
      params:
        BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: acceptance-tests
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-scaling-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### FAILOVER
- name: deploy-to-failover
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite
  - *broker-registrar-bosh-lite

- name: test-failover
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-failover]
    - get: bosh-lite-environment
      passed: [deploy-to-failover]
      trigger: true
      version: every
    - get: bosh-lite-repo
    - get: version
      passed: [deploy-to-failover]
  - *smoke-tests-bosh-lite
  - task: run-failover-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/failover/failover-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### DATA-LOSS
- name: deploy-to-data-loss
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: test-data-loss
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-data-loss]
    - get: bosh-lite-environment
      passed: [deploy-to-data-loss]
      trigger: true
      version: every
    - get: bosh-lite-repo
    - get: version
      passed: [deploy-to-data-loss]
  - task: run-data-loss-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/data-loss/force-sst-test
  - task: wait-for-monit
    config:
      platform: *platform
      image_resource: *image_resource
      run:
        path: /bin/bash
        args:
        - "-c"
        - "sleep 600"
  - task: run-rejoin-unsafe-errand
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: bosh-lite-repo
      params:
        BOSH_CA_CERT_PATH: bosh-lite-repo/ca/certs/ca.crt
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
        ERRAND: rejoin-unsafe
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### DISABLE-AUTO-SST
- name: deploy-to-disable-auto-sst
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: test-disable-auto-sst
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-disable-auto-sst]
    - get: bosh-lite-environment
      passed: [deploy-to-disable-auto-sst]
      trigger: true
      version: every
    - get: version
      passed: [deploy-to-disable-auto-sst]
  - aggregate:
    - task: break-cluster
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: cf-mysql-ci
          - name: bosh-lite-environment
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          BOSH_SSH_KEY: {{bosh-lite-private-key}}
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/data-loss/force-sst-test
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: bosh-lite-environment
        outputs:
          - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          TINY_GCACHE: true
          DISABLE_PARANOIA: true
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - task: wait-for-monit
    config:
      platform: *platform
      image_resource: *image_resource
      run:
        path: /bin/bash
        args:
        - "-c"
        - "sleep 200"
  - task: disable-auto-sst-to-fix-cluster
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: deployment-manifest
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_MANIFEST: deployment-manifest/deployment.yml
      run:
        path: cf-mysql-ci/scripts/data-loss/disable-sst-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### VERIFY CLUSTER SCHEMAS
- name: deploy-to-verify-cluster-schemas
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [create-and-compile-release]
      trigger: true
    - get: weekly-trigger
      passed: [test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-repo
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: version
      passed: [create-and-compile-release]
  - *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: test-verify-cluster-schemas
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-verify-cluster-schemas]
    - get: bosh-lite-environment
      passed: [deploy-to-verify-cluster-schemas]
      trigger: true
      version: every
    - get: version
      passed: [deploy-to-verify-cluster-schemas]
  - task: run-verify-cluster-schemas-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/verify-cluster-schemas/force-divergent-schemas-test
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### INTEGRATION DEPLOY
- name: promote-to-rc
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - test-full-bosh
      - test-failover
      - test-data-loss
      - test-scaling
      - test-disable-auto-sst
      - test-verify-cluster-schemas
      trigger: true
  - task: rc-tag-file
    config:
      platform: *platform
      image_resource: *image_resource
      run:
        path: /bin/bash
        args:
          - '-c'
          - mkdir -p rc-tag-dir && echo -n "release-candidate-v24" > rc-tag-dir/rc-tag-file
      outputs:
        - name: rc-tag-dir
  - try:
      task: delete-tag
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: cf-mysql-ci
          - name: cf-mysql-release
          - name: rc-tag-dir
        params:
          GIT_AUTHOR_NAME: {{oss-git-writer-name}}
          GIT_AUTHOR_EMAIL: {{oss-git-writer-email}}
          GIT_PRIVATE_KEY: {{git-writer-private-key}}
        run:
          path: cf-mysql-ci/scripts/publish/delete-tag
  - put: cf-mysql-release
    params:
      repository: cf-mysql-release
      tag: rc-tag-dir/rc-tag-file
      only_tag: true
- name: upload-rc-artifacts
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - test-full-bosh
      - test-failover
      - test-data-loss
      - test-scaling
      - test-disable-auto-sst
      - test-verify-cluster-schemas
      trigger: true
    - get: cf-mysql-ci
    - get: version
      passed:
      - test-full-bosh
      - test-failover
      - test-data-loss
      - test-scaling
      - test-disable-auto-sst
      - test-verify-cluster-schemas
  - task: create-rc-release-artifacts
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: version
      outputs:
        - name: release-tarball
      params:
        RELEASE_NAME: cf-mysql
        TAG_MATCH: v24*
      run:
        path: cf-mysql-ci/scripts/create_release
  - put: pcf-mysql-rc-artifacts
    params:
      file: release-tarball/cf-mysql*.tgz
