---
### RESOURCES
resources:
- name: cf-mysql-ci-image
  type: docker-image
  source:
    username: {{pivotal-docker-username}}
    email: {{pivotal-docker-email}}
    password: {{pivotal-docker-password}}
    repository: cloudfoundry/cf-mysql-ci

- name: cf-mysql-dockerfile
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/cf-mysql-ci.git
    branch: master
    paths:
    - scripts/Dockerfile

- name: aws-bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: bosh-lite-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent

- name: deployments-configuration
  type: git
  source:
    uri: git@github.com:pivotal-cf/deployments-core-services
    private_key: {{git-private-key}}

- name: cf-mysql-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/cf-mysql-ci.git

- name: cf-mysql-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-mysql-release.git
    branch: develop
    private_key: {{git-writer-private-key}}

- name: cf-mysql-previous-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-mysql-release.git
    branch: v29
    private_key: {{git-writer-private-key}}

- name: cf-mysql-release-master
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-release.git
    branch: master

- name: aws-deployment
  type: bosh-deployment
  source:
    username: {{aws_bosh_username}}
    password: {{aws_bosh_password}}
    deployment: cf-mysql
    ignore_ssl: true

- name: bosh-lite-deployment
  type: bosh-deployment
  source:
    username: {{bosh-lite-username}}
    password: {{bosh-lite-password}}
    deployment: cf-warden-mysql
    ignore_ssl: true

- name: integration-deployment
  type: bosh-deployment
  source:
    username: {{integration_env_bosh_username}}
    password: {{integration_env_bosh_password}}
    deployment: cf-a1-mysql
    ignore_ssl: true

- name: aws-environment
  type: pool
  source:
    uri: &pool-uri git@github.com:pivotal-cf-experimental/core-services-oss-env-resource-pool
    branch: master
    pool: aws
    private_key: {{git-writer-private-key}}

- name: integration-environment
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: aws-integration
    private_key: {{git-writer-private-key}}

- name: bosh-lite-environment
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: bosh-lites-working
    private_key: {{git-writer-private-key}}

- name: bosh-lite-no-cf-environment
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: bosh-lites-no-cf
    private_key: {{git-writer-private-key}}

- name: compiled-packages-lock
  type: pool
  source:
    uri: *pool-uri
    branch: master
    pool: compiled-packages
    private_key: {{git-writer-private-key}}

- name: cf-mysql-latest-release-tarball
  type: bosh-io-release
  source:
    repository: cloudfoundry/cf-mysql-release

- name: cf-mysql-rc-artifacts
  type: s3
  source:
    bucket: cf-mysql-releases
    regexp: release-candidate/cf-mysql-(.*)\+.*.tgz
    access_key_id: {{cf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{cf-mysql-ci-aws-secret-access-key}}

- name: cf-mysql-compiled-release
  type: s3
  source:
    bucket: cf-mysql-releases
    access_key_id: {{cf-mysql-ci-aws-access-key-id}}
    secret_access_key: {{cf-mysql-ci-aws-secret-access-key}}
    versioned_file: compiled-releases/cf-mysql-ubuntu-trusty-develop.tgz

- name: bosh2.0-cli
  type: s3
  source:
    bucket: bosh-cli-artifacts
    regexp: bosh-cli-([\d\.]+)-linux-amd64

- name: bosh-2.0-bosh-lite-deployment
  type: bosh-deployment
  source:
    username: {{bosh-lite-username}}
    password: {{bosh-lite-password}}
    deployment: cf-mysql
    ignore_ssl: true

### JOBS
jobs:
- name: build-dockerfile
  plan:
  - get: cf-mysql-dockerfile
    trigger: true
  - put: cf-mysql-ci-image
    params:
      build: cf-mysql-dockerfile/scripts/

- name: check-submodules
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
    - get: cf-mysql-ci
  - task: check-git-submodules
    config:
      platform: &platform linux
      image_resource: &image_resource
        type: docker-image
        source:
          repository: cloudfoundry/cf-mysql-ci
      inputs:
      - name: cf-mysql-release
      - name: cf-mysql-ci
      run:
        path: cf-mysql-ci/scripts/sanity/check-git-submodules

- name: test-unit
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      trigger: true
  - aggregate:
    - task: test-unit
      file: cf-mysql-ci/ci/tasks/test-unit.yml
      attempts: 5
    - task: test-broker
      file: cf-mysql-ci/ci/tasks/test-broker.yml
    - task: test-broker-dependencies
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.3.1'
        inputs:
        - name: cf-mysql-release
        run:
          path: bash
          args:
          - -c
          - |
            set -eux

            gem install bundler-audit
            bundle-audit update

            cd cf-mysql-release/src/cf-mysql-broker

            bundle-audit

- name: test-sample-stubs
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
  - task: test-sample-stubs
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-release
      run:
        path: cf-mysql-release/scripts/test-sample-stubs

- name: create-and-compile-release
  serial: true
  plan:
  - aggregate:
    - get: cf-mysql-release
      trigger: true
      passed:
        - test-unit
        - test-sample-stubs
    - get: cf-mysql-ci
    - get: aws-bosh-stemcell
  - &create-release
    task: create-release
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      outputs:
      - name: release-tarball
      params:
        RELEASE_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/create_release
  - put: compiled-packages-lock
    params:
      acquire: true
  - &compile-release
    task: compile-release
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: release-tarball
      - name: aws-bosh-stemcell
      outputs:
      - name: compiled-release-tarball
      params:
        BOSH_USERNAME: {{bosh_compilation_username}}
        BOSH_PASSWORD: {{bosh_compilation_password}}
        BOSH_DIRECTOR: {{bosh_compilation_director}}
      run:
        path: cf-mysql-ci/scripts/compile_release
    ensure:
      put: compiled-packages-lock
      params:
        release: compiled-packages-lock
  - put: cf-mysql-compiled-release
    params:
      file: compiled-release-tarball/*.tgz

- name: claim-aws-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit, check-submodules]
      trigger: true
    - put: aws-environment
      params:
        acquire: true

- name: release-aws-environment-manual
  plan:
  - try:
      do:
      - get: aws-environment
        passed: [claim-aws-environment]
      - put: aws-environment
        params:
          release: aws-environment

- name: delete-aws-deployment
  plan:
  - aggregate:
    - get: aws-environment
      passed: [claim-aws-environment]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-aws-environment]
    - get: cf-mysql-ci
  - try: 
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        params:
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: broker-deregistrar
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql  
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment

- name: deploy-to-initial
  plan:
  - aggregate:
    - get: deployments-configuration
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
        - delete-aws-deployment
        - create-and-compile-release
    - get: aws-bosh-stemcell
      passed: [create-and-compile-release]
    - get: aws-environment
      trigger: true
      version: every
      passed: [delete-aws-deployment]
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: deployments-configuration
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: aws-environment
      outputs:
      - name: deployment-manifest
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENTS_DIR: deployments-configuration
      run:
        path: cf-mysql-ci/scripts/bosh/make_manifest
  - put: aws-deployment
    params:
      target_file: aws-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [compiled-release-tarball/*.tgz]
      stemcells: [aws-bosh-stemcell/*.tgz]

- name: run-smoke-tests-initial
  plan:
  - aggregate:
    - get: aws-environment
      passed: [deploy-to-initial]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [deploy-to-initial]
    - get: cf-mysql-ci
  - task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-smoke-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        ERRAND: smoke-tests
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: dashboard-test-initial
  plan:
  - aggregate:
      - get: aws-environment
        passed: [run-smoke-tests-initial]
        trigger: true
        version: every
      - get: cf-mysql-release
        passed: [run-smoke-tests-initial]
      - get: cf-mysql-ci
  - task: dashboard-test
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        TEST_TYPE: dashboard
      run:
        path: cf-mysql-ci/scripts/acceptance-tests

- name: acceptance-test-initial
  plan:
  - aggregate:
      - get: aws-environment
        passed: [dashboard-test-initial]
        trigger: true
        version: every
      - get: cf-mysql-release
        passed: [dashboard-test-initial]
      - get: cf-mysql-ci
  - task: acceptance-test
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        TEST_TYPE: acceptance
        PROXY_COUNT: 1
      run:
        path: cf-mysql-ci/scripts/acceptance-tests

- name: cleanup-aws-deployment
  plan:
  - aggregate:
    - get: aws-environment
      trigger: true
      version: every
      passed: [acceptance-test-initial]
    - get: cf-mysql-release
      passed: [acceptance-test-initial]
    - get: cf-mysql-ci
  - try:
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: aws-environment
        params:
          ENV_TARGET_FILE: aws-environment/name
          ENV_METADATA: aws-environment/metadata
          ERRAND: broker-deregistrar
          SKIP_IF_NO_DEPLOYMENT: true
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - task: delete-aws-deployment
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: aws-environment
      params:
        ENV_TARGET_FILE: aws-environment/name
        ENV_METADATA: aws-environment/metadata
        DEPLOYMENT_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/bosh/delete_deployment

- name: release-aws-environment
  plan:
  - get: aws-environment
    passed: [cleanup-aws-deployment]
    trigger: true
    version: every
  - get: cf-mysql-release
    passed: [cleanup-aws-deployment]
  - put: aws-environment
    params:
      release: aws-environment

### SCALING
- name: claim-bosh-lite-scaling
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-scaling-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-scaling]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-scaling-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-scaling]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-scaling]
    - get: cf-mysql-ci
  - try: &broker-deregistrar-bosh-lite
      task: run-broker-deregistrar
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          ERRAND: broker-deregistrar
          DEPLOYMENT_NAME: cf-warden-mysql  
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand
  - &delete-deployment-bosh-lite
    aggregate:
    - task: delete-cf-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment
    - task: delete-cf-warden-mysql-deployment
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/bosh/delete_deployment

- name: deploy-to-scaling
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - delete-scaling-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: cf-mysql-ci
    - get: bosh-lite-environment
      passed: [delete-scaling-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        MINIMAL_MODE: true
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - &deploy-to-bosh-lite
    put: bosh-lite-deployment
    params:
      target_file: bosh-lite-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [compiled-release-tarball/*.tgz]
      stemcells: [bosh-lite-stemcell/*.tgz]

- name: scaling-broker-registrar
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-scaling]
    - get: bosh-lite-environment
      passed: [deploy-to-scaling]
      trigger: true
      version: every
  - &broker-registrar-bosh-lite
    task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-warden-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: scaling-smoke-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [scaling-broker-registrar]
    - get: bosh-lite-environment
      passed: [scaling-broker-registrar]
      trigger: true
      version: every
  - &smoke-tests-bosh-lite
    task: run-smoke-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        ERRAND: smoke-tests
        DEPLOYMENT_NAME: cf-warden-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: scaling-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [scaling-smoke-tests]
    - get: bosh-lite-environment
      passed: [scaling-smoke-tests]
      trigger: true
      version: every
  - task: run-scaling-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-test

- name: release-scaling-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [scaling-tests]
    - get: bosh-lite-environment
      passed: [scaling-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### ARB-TO-FULL-SCALING
- name: claim-bosh-lite-arb-to-full-scaling
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-arb-to-full-scaling-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-arb-to-full-scaling]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-arb-to-full-scaling-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-arb-to-full-scaling]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-arb-to-full-scaling]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-arb-to-full-scaling
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-arb-to-full-scaling-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-arb-to-full-scaling-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - &make-manifest-bosh-lite
    task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: arb-to-full-scaling-broker-registrar
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-arb-to-full-scaling]
    - get: bosh-lite-environment
      passed: [deploy-to-arb-to-full-scaling]
      trigger: true
      version: every
  - *broker-registrar-bosh-lite

- name: arb-to-full-scaling-smoke-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [arb-to-full-scaling-broker-registrar]
    - get: bosh-lite-environment
      passed: [arb-to-full-scaling-broker-registrar]
      trigger: true
      version: every
  - *smoke-tests-bosh-lite

- name: arb-to-full-scaling-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [arb-to-full-scaling-smoke-tests]
    - get: bosh-lite-environment
      passed: [arb-to-full-scaling-smoke-tests]
      trigger: true
      version: every
  - task: run-arb-to-full-scaling-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/scaling/scaling-arb-to-full-test

- name: release-arb-to-full-scaling-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [arb-to-full-scaling-tests]
    - get: bosh-lite-environment
      passed: [arb-to-full-scaling-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### FAILOVER
- name: claim-bosh-lite-failover
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-failover-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-failover]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-failover-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-failover]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-failover]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-failover
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-failover-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-failover-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - &make-manifest-bosh-lite
    task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: failover-broker-registrar
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-failover]
    - get: bosh-lite-environment
      passed: [deploy-to-failover]
      trigger: true
      version: every
  - *broker-registrar-bosh-lite

- name: failover-smoke-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [failover-broker-registrar]
    - get: bosh-lite-environment
      passed: [failover-broker-registrar]
      trigger: true
      version: every
  - *smoke-tests-bosh-lite

- name: failover-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [failover-smoke-tests]
    - get: bosh-lite-environment
      passed: [failover-smoke-tests]
      trigger: true
      version: every
  - task: run-failover-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/failover/failover-test

- name: release-failover-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [failover-tests]
    - get: bosh-lite-environment
      passed: [failover-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### UPGRADE
- name: claim-bosh-lite-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-upgrade-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-upgrade]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-upgrade-deployment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [claim-bosh-lite-upgrade]
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-upgrade]
      trigger: true
      version: every
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-previous-to-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-upgrade-deployment]
      trigger: true
      version: every
    - get: cf-mysql-release
      resource: cf-mysql-previous-release
    - get: aws-bosh-stemcell
      passed: [create-and-compile-release]
  - aggregate:
    - *create-release
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-release
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        outputs:
        - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          USE_PREVIOUS_RELEASE: true
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - put: compiled-packages-lock
    params:
      acquire: true
  - *compile-release
  - *deploy-to-bosh-lite

- name: broker-registrar-previous-on-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      # we don't use current cf-mysql in deploy stage
      passed: [delete-upgrade-deployment]
    - get: bosh-lite-environment
      passed: [deploy-previous-to-upgrade]
      trigger: true
      version: every
  - *broker-registrar-bosh-lite

- name: persistence-test-data-write-before-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [broker-registrar-previous-on-upgrade]
    - get: bosh-lite-environment
      passed: [broker-registrar-previous-on-upgrade]
      trigger: true
      version: every
  - &persistence-test-data-write
    task: persistence-test-data-write
    config:
      platform: *platform
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-environment
      - name: cf-mysql-ci
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/persistence/load-test-data

- name: deploy-current-to-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - persistence-test-data-write-before-upgrade
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [persistence-test-data-write-before-upgrade]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: persistence-test-data-read-after-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-current-to-upgrade]
    - get: bosh-lite-environment
      passed: [deploy-current-to-upgrade]
      trigger: true
      version: every
  - &persistence-test-data-read
    task: persistence-test-data-read
    config:
      platform: *platform
      image_resource:
        type: docker-image
        source:
          repository: pivotalcf/mysql-restore
      inputs:
      - name: bosh-lite-environment
      - name: cf-mysql-ci
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
      run:
        path: cf-mysql-ci/scripts/persistence/verify-db-matches-test-data

- name: smoke-tests-current-on-upgrade
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-current-to-upgrade]
    - get: bosh-lite-environment
      passed: [deploy-current-to-upgrade]
      trigger: true
      version: every
  - *smoke-tests-bosh-lite

- name: dashboard-test-bosh-lite
  plan:
    - aggregate:
      - get: bosh-lite-environment
        passed: [deploy-current-to-upgrade]
        trigger: true
        version: every
      - get: cf-mysql-release
        passed: [deploy-current-to-upgrade]
      - get: cf-mysql-ci
    - task: dashboard-test-bosh-lite
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-release
        - name: bosh-lite-environment
        - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          USE_SMALL_PLANS: true
          USE_HTTPS: false
          TEST_TYPE: dashboard
        run:
          path: cf-mysql-ci/scripts/acceptance-tests

- name: release-upgrade-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [smoke-tests-current-on-upgrade, dashboard-test-bosh-lite, persistence-test-data-read-after-upgrade]
    - get: bosh-lite-environment
      passed: [smoke-tests-current-on-upgrade, dashboard-test-bosh-lite, persistence-test-data-read-after-upgrade]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### STANDALONE DEPLOY

- name: claim-bosh-lite-standalone
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      params:
        acquire: true

- name: release-standalone-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        resource: bosh-lite-no-cf-environment
        passed: [claim-bosh-lite-standalone]
      - put: bosh-lite-environment
        resource: bosh-lite-no-cf-environment
        params:
          release: bosh-lite-environment

- name: delete-standalone-deployment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [claim-bosh-lite-standalone]
    - get: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      passed: [claim-bosh-lite-standalone]
      trigger: true
      version: every
    - get: cf-mysql-ci
  - *delete-deployment-bosh-lite

- name: deploy-to-standalone
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-standalone-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      passed: [delete-standalone-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        STANDALONE_MODE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: persistence-test-data-write-before-bootstrap
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-standalone]
    - get: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      passed: [deploy-to-standalone]
      trigger: true
      version: every
  - *persistence-test-data-write

- name: test-bootstrap
  plan:
    - aggregate:
      - get: cf-mysql-ci
      - get: cf-mysql-release
        passed: [persistence-test-data-write-before-bootstrap]
      - get: bosh-lite-environment
        resource: bosh-lite-no-cf-environment
        passed: [persistence-test-data-write-before-bootstrap]
        trigger: true
        version: every
    - task: break-mysql-cluster
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          BOSH_LITE_SSH_KEY: {{bosh-lite-private-key}}
        run:
          path: cf-mysql-ci/scripts/bootstrap/break-mysql-cluster
    - task: bootstrap
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: bosh-lite-environment
          - name: cf-mysql-ci
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          BOSH_USER: {{bosh-lite-username}}
          ENV_METADATA: bosh-lite-environment/metadata
          DEPLOYMENT_NAME: cf-warden-mysql
          ERRAND: bootstrap
        run:
          path: cf-mysql-ci/scripts/bosh/run_errand

- name: persistence-test-data-read-after-bootstrap
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [test-bootstrap]
    - get: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      passed: [test-bootstrap]
      trigger: true
      version: every
  - *persistence-test-data-read

- name: release-standalone-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [persistence-test-data-read-after-bootstrap]
    - get: bosh-lite-environment
      resource: bosh-lite-no-cf-environment
      passed: [persistence-test-data-read-after-bootstrap]
      trigger: true
      version: every
  - put: bosh-lite-environment
    resource: bosh-lite-no-cf-environment
    params:
      release: bosh-lite-environment

### DATA-LOSS
- name: claim-bosh-lite-data-loss
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-data-loss-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-data-loss]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-data-loss-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-data-loss]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-data-loss]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-data-loss
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-data-loss-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-data-loss-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: data-loss-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-data-loss]
    - get: bosh-lite-environment
      passed: [deploy-to-data-loss]
      trigger: true
      version: every
  - task: run-data-loss-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/data-loss/force-sst-test
  - task: run-rejoin-unsafe-errand
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
        ERRAND: rejoin-unsafe
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: release-data-loss-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [data-loss-tests]
    - get: bosh-lite-environment
      passed: [data-loss-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### DISABLE-PARANOID
- name: claim-bosh-lite-disable-paranoid
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-disable-paranoid-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-disable-paranoid]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-disable-paranoid-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-disable-paranoid]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-disable-paranoid]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-disable-paranoid
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-disable-paranoid-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-disable-paranoid-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: disable-paranoid-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-disable-paranoid]
    - get: bosh-lite-environment
      passed: [deploy-to-disable-paranoid]
      trigger: true
      version: every
  - aggregate:
    - task: break-cluster
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
          - name: cf-mysql-ci
          - name: bosh-lite-environment
        params:
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          BOSH_SSH_KEY: {{bosh-lite-private-key}}
          DEPLOYMENT_NAME: cf-warden-mysql
        run:
          path: cf-mysql-ci/scripts/data-loss/force-sst-test
    - task: make-manifest
      config:
        platform: *platform
        image_resource: *image_resource
        inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
        - name: bosh-lite-environment
        outputs:
          - name: deployment-manifest
        params:
          OUTPUT_FILE: deployment-manifest/deployment.yml
          ENV_TARGET_FILE: bosh-lite-environment/name
          ENV_METADATA: bosh-lite-environment/metadata
          TINY_GCACHE: true
          DISABLE_PARANOIA: true
        run:
          path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - task: disable-paranoid-to-fix-cluster
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: deployment-manifest
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_MANIFEST: deployment-manifest/deployment.yml
      run:
        path: cf-mysql-ci/scripts/data-loss/disable-paranoid-test

- name: release-disable-paranoid-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [disable-paranoid-tests]
    - get: bosh-lite-environment
      passed: [disable-paranoid-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### VERIFY CLUSTER SCHEMAS
- name: claim-bosh-lite-verify-cluster-schemas
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-verify-cluster-schemas-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-verify-cluster-schemas]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-verify-cluster-schemas-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-verify-cluster-schemas]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-verify-cluster-schemas]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-verify-cluster-schemas
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - delete-verify-cluster-schemas-deployment
      - create-and-compile-release
    - get: bosh-lite-stemcell
    - get: bosh-lite-environment
      passed: [delete-verify-cluster-schemas-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: bosh-lite-environment
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        TINY_GCACHE: true
      run:
        path: cf-mysql-ci/scripts/bosh-lite/make_manifest
  - *deploy-to-bosh-lite

- name: verify-cluster-schemas-tests
  plan:
  - aggregate:
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed: [deploy-to-verify-cluster-schemas]
    - get: bosh-lite-environment
      passed: [deploy-to-verify-cluster-schemas]
      trigger: true
      version: every
  - task: run-verify-cluster-schemas-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: bosh-lite-environment
        - name: cf-mysql-release
      params:
        ENV_TARGET_FILE: bosh-lite-environment/name
        ENV_METADATA: bosh-lite-environment/metadata
        BOSH_SSH_KEY: {{bosh-lite-private-key}}
        DEPLOYMENT_NAME: cf-warden-mysql
      run:
        path: cf-mysql-ci/scripts/verify-cluster-schemas/force-divergent-schemas-test

- name: release-verify-cluster-schemas-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [verify-cluster-schemas-tests]
    - get: bosh-lite-environment
      passed: [verify-cluster-schemas-tests]
      trigger: true
      version: every
  - put: bosh-lite-environment
    params:
      release: bosh-lite-environment

### INTEGRATION DEPLOY
- name: claim-integration-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      # all bosh-lite pipelines
      - release-aws-environment
      - release-upgrade-environment
      - release-failover-environment
      - release-scaling-environment
      - release-standalone-environment
      - release-arb-to-full-scaling-environment
      - release-data-loss-environment
      - release-disable-paranoid-environment
      - release-verify-cluster-schemas-environment
      - release-bosh-2.0-environment
      trigger: true
  - put: integration-environment
    params:
      acquire: true

- name: release-integration-environment-manual
  plan:
  - try:
      do:
      - get: integration-environment
        passed: [claim-integration-environment]
      - put: integration-environment
        params:
          release: integration-environment

- name: deploy-to-integration
  serial: true
  plan:
  - aggregate:
    - get: deployments-configuration
    - get: cf-mysql-ci
    - get: cf-mysql-release
      passed:
      - claim-integration-environment
      - create-and-compile-release
    - get: aws-bosh-stemcell
      passed:
      - deploy-to-initial
      - deploy-previous-to-upgrade
    - get: integration-environment
      passed: [claim-integration-environment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: deployments-configuration
      - name: cf-mysql-ci
      - name: cf-mysql-release
      - name: integration-environment
      outputs:
        - name: deployment-manifest
      params:
        ENV_TARGET_FILE: integration-environment/name
        ENV_METADATA: integration-environment/metadata
        DEPLOYMENTS_DIR: deployments-configuration
        USE_EXISTING_CF_MANIFEST: true
      run:
        path: cf-mysql-ci/scripts/bosh/make_manifest
  - put: integration-deployment
    params:
      target_file: integration-environment/name
      manifest: deployment-manifest/deployment.yml
      releases: [compiled-release-tarball/*.tgz]
      stemcells: [aws-bosh-stemcell/*.tgz]

- name: run-smoke-tests-integration
  plan:
  - aggregate:
    - get: integration-environment
      passed: [deploy-to-integration]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [deploy-to-integration]
    - get: cf-mysql-ci
  - task: run-broker-registrar
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: integration-environment
      params:
        ENV_TARGET_FILE: integration-environment/name
        ENV_METADATA: integration-environment/metadata
        ERRAND: broker-registrar
        DEPLOYMENT_NAME: cf-a1-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand
  - task: run-smoke-tests
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: integration-environment
      params:
        ENV_TARGET_FILE: integration-environment/name
        ENV_METADATA: integration-environment/metadata
        ERRAND: smoke-tests
        DEPLOYMENT_NAME: cf-a1-mysql  
      run:
        path: cf-mysql-ci/scripts/bosh/run_errand

- name: release-integration-environment
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [run-smoke-tests-integration]
    - get: integration-environment
      passed: [run-smoke-tests-integration]
      trigger: true
      version: every
  - put: integration-environment
    params:
      release: integration-environment

- name: upload-rc-artifacts
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [run-smoke-tests-integration]
      trigger: true
    - get: cf-mysql-ci
  - task: create-rc-release-artifacts
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
      outputs:
        - name: release-tarball
      params:
        RELEASE_NAME: cf-mysql
      run:
        path: cf-mysql-ci/scripts/create_release
  - put: cf-mysql-rc-artifacts
    params:
      file: release-tarball/cf-mysql*.tgz

- name: promote-to-rc
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [run-smoke-tests-integration]
      trigger: true
      params:
        fetch: [release-candidate]
    - get: cf-mysql-ci
  - task: merge-and-push-to-release-candidate
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
        - name: cf-mysql-ci
        - name: cf-mysql-release
      run:
        path: cf-mysql-ci/scripts/publish/merge-and-push
      params:
        SOURCE_BRANCH: release-candidate
        BRANCH_TO_MERGE: develop
        GIT_PRIVATE_KEY: {{git-writer-private-key}}

### BOSH 2.0
- name: claim-bosh-lite-bosh-2.0
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed: [test-sample-stubs, test-unit]
      trigger: true
    - put: bosh-lite-environment
      params:
        acquire: true

- name: release-bosh-2.0-environment-manual
  plan:
  - try:
      do:
      - get: bosh-lite-environment
        passed: [claim-bosh-lite-bosh-2.0]
      - put: bosh-lite-environment
        params:
          release: bosh-lite-environment

- name: delete-bosh-2.0-deployment
  plan:
  - aggregate:
    - get: bosh-lite-environment
      passed: [claim-bosh-lite-bosh-2.0]
      trigger: true
      version: every
    - get: cf-mysql-release
      passed: [claim-bosh-lite-bosh-2.0]
    - get: cf-mysql-ci
  - try: *broker-deregistrar-bosh-lite
  - *delete-deployment-bosh-lite

- name: deploy-to-bosh-2.0
  plan:
  - aggregate:
    - get: cf-mysql-release
      passed:
      - delete-bosh-2.0-deployment
      - create-and-compile-release
    - get: cf-mysql-ci
    - get: bosh-cli
      resource: bosh2.0-cli
    - get: bosh-lite-environment
      passed: [delete-bosh-2.0-deployment]
      trigger: true
      version: every
    - get: compiled-release-tarball
      resource: cf-mysql-compiled-release
      passed: [create-and-compile-release]
    - get: bosh-lite-stemcell
  - task: get-cf-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: bosh-lite-environment
      - name: cf-mysql-ci
      outputs:
        - name: cf-manifest
      params:
        OUTPUT_FILE: cf-manifest/cf.yml
        ENV_METADATA: bosh-lite-environment/metadata
        ENV_TARGET_FILE: bosh-lite-environment/name
      run:
        path: bash
        args:
        - -c
        - |
          set -eux

          : "${OUTPUT_FILE:?}"
          : "${ENV_TARGET_FILE:?}"
          : "${ENV_METADATA:?}"

          source cf-mysql-ci/scripts/utils.sh

          DIRECTOR_IP=$(cat "${ENV_TARGET_FILE}")

          BOSH_USERNAME="$(jq_val "bosh_user" "${ENV_METADATA}")"
          BOSH_PASSWORD="$(jq_val "bosh_password" "${ENV_METADATA}")"

          CF_API_USER="$(jq_val "cf_api_user" "${ENV_METADATA}")"
          CF_API_PASSWORD="$(jq_val "cf_api_password" "${ENV_METADATA}")"

          bosh -n target "${DIRECTOR_IP}"
          bosh -n login "${BOSH_USERNAME}" "${BOSH_PASSWORD}"

          bosh -n download manifest cf-warden "${OUTPUT_FILE}"

  - task: make-manifest
    config:
      platform: *platform
      image_resource: *image_resource
      inputs:
      - name: cf-mysql-release
      - name: bosh-cli
      - name: cf-manifest
      outputs:
        - name: deployment-manifest
      params:
        OUTPUT_FILE: deployment-manifest/deployment.yml
        CF_MANIFEST_FILE: cf-manifest/cf.yml
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          mv bosh-cli/bosh-cli-* bosh-cli/bosh2
          chmod +x bosh-cli/bosh2
          export PATH=$PATH:$PWD/bosh-cli/

          ./cf-mysql-release/scripts/generate-cf-vars-for-bosh-2.0 "${CF_MANIFEST_FILE}" > /tmp/vars-from-cf.yml

          bosh2 build-manifest \
            ./cf-mysql-release/manifest-generation/cf-mysql-template-v2.yml \
            -l ./cf-mysql-release/manifest-generation/bosh2.0/bosh-lite/default-vars.yml \
            -l /tmp/vars-from-cf.yml \
            > "${OUTPUT_FILE}"


  - put: bosh-2.0-bosh-lite-deployment
    params:
      manifest: deployment-manifest/deployment.yml
      releases:
      - compiled-release-tarball/*.tgz
      stemcells:
      - bosh-lite-stemcell/*.tgz
      target_file: bosh-lite-environment/name

- name: release-bosh-2.0-environment
  plan:
  - try:
    do:
    - aggregate:
      - get: cf-mysql-release
        passed: [deploy-to-bosh-2.0]
      - get: bosh-lite-environment
        passed: [deploy-to-bosh-2.0]
        trigger: true
        version: every
    - put: bosh-lite-environment
      params:
        release: bosh-lite-environment

groups:
- name: cf-mysql
  jobs:
  - check-submodules
  - build-dockerfile
  - test-unit
  - test-sample-stubs
  - create-and-compile-release
  - claim-aws-environment
  - release-aws-environment-manual
  - delete-aws-deployment
  - deploy-to-initial
  - run-smoke-tests-initial
  - dashboard-test-initial
  - acceptance-test-initial
  - cleanup-aws-deployment
  - release-aws-environment
  - claim-bosh-lite-scaling
  - release-scaling-environment-manual
  - delete-scaling-deployment
  - deploy-to-scaling
  - scaling-broker-registrar
  - scaling-smoke-tests
  - scaling-tests
  - release-scaling-environment
  - claim-bosh-lite-failover
  - release-failover-environment-manual
  - delete-failover-deployment
  - deploy-to-failover
  - failover-broker-registrar
  - failover-smoke-tests
  - failover-tests
  - release-failover-environment
  - claim-bosh-lite-upgrade
  - release-upgrade-environment-manual
  - delete-upgrade-deployment
  - deploy-previous-to-upgrade
  - broker-registrar-previous-on-upgrade
  - persistence-test-data-write-before-upgrade
  - deploy-current-to-upgrade
  - persistence-test-data-read-after-upgrade
  - smoke-tests-current-on-upgrade
  - dashboard-test-bosh-lite
  - release-upgrade-environment
  - claim-bosh-lite-standalone
  - release-standalone-environment-manual
  - delete-standalone-deployment
  - deploy-to-standalone
  - persistence-test-data-write-before-bootstrap
  - test-bootstrap
  - persistence-test-data-read-after-bootstrap
  - release-standalone-environment
  - claim-bosh-lite-data-loss
  - release-data-loss-environment-manual
  - delete-data-loss-deployment
  - deploy-to-data-loss
  - data-loss-tests
  - release-data-loss-environment
  - claim-bosh-lite-disable-paranoid
  - release-disable-paranoid-environment-manual
  - delete-disable-paranoid-deployment
  - deploy-to-disable-paranoid
  - disable-paranoid-tests
  - release-disable-paranoid-environment
  - claim-bosh-lite-verify-cluster-schemas
  - release-verify-cluster-schemas-environment-manual
  - delete-verify-cluster-schemas-deployment
  - deploy-to-verify-cluster-schemas
  - verify-cluster-schemas-tests
  - release-verify-cluster-schemas-environment
  - claim-bosh-lite-bosh-2.0
  - release-bosh-2.0-environment-manual
  - delete-bosh-2.0-deployment
  - deploy-to-bosh-2.0
  - release-bosh-2.0-environment
  - claim-integration-environment
  - release-integration-environment-manual
  - deploy-to-integration
  - run-smoke-tests-integration
  - release-integration-environment
  - upload-rc-artifacts
  - promote-to-rc
  - claim-bosh-lite-arb-to-full-scaling
  - release-arb-to-full-scaling-environment-manual
  - delete-arb-to-full-scaling-deployment
  - deploy-to-arb-to-full-scaling
  - arb-to-full-scaling-broker-registrar
  - arb-to-full-scaling-smoke-tests
  - arb-to-full-scaling-tests
  - release-arb-to-full-scaling-environment
- name: failover
  jobs:
  - claim-bosh-lite-failover
  - release-failover-environment-manual
  - delete-failover-deployment
  - deploy-to-failover
  - failover-broker-registrar
  - failover-smoke-tests
  - failover-tests
  - release-failover-environment
- name: standalone
  jobs:
  - claim-bosh-lite-standalone
  - release-standalone-environment-manual
  - delete-standalone-deployment
  - deploy-to-standalone
  - release-standalone-environment
  - persistence-test-data-write-before-bootstrap
  - test-bootstrap
  - persistence-test-data-read-after-bootstrap
- name: upgrade
  jobs:
  - claim-bosh-lite-upgrade
  - release-upgrade-environment-manual
  - delete-upgrade-deployment
  - deploy-previous-to-upgrade
  - broker-registrar-previous-on-upgrade
  - persistence-test-data-write-before-upgrade
  - deploy-current-to-upgrade
  - persistence-test-data-read-after-upgrade
  - smoke-tests-current-on-upgrade
  - dashboard-test-bosh-lite
  - release-upgrade-environment
- name: scaling
  jobs:
  - claim-bosh-lite-scaling
  - release-scaling-environment-manual
  - delete-scaling-deployment
  - deploy-to-scaling
  - scaling-broker-registrar
  - scaling-smoke-tests
  - scaling-tests
  - release-scaling-environment
- name: arb-to-full
  jobs:
  - claim-bosh-lite-arb-to-full-scaling
  - release-arb-to-full-scaling-environment-manual
  - delete-arb-to-full-scaling-deployment
  - deploy-to-arb-to-full-scaling
  - arb-to-full-scaling-broker-registrar
  - arb-to-full-scaling-smoke-tests
  - arb-to-full-scaling-tests
  - release-arb-to-full-scaling-environment
- name: data-loss
  jobs:
  - claim-bosh-lite-data-loss
  - release-data-loss-environment-manual
  - delete-data-loss-deployment
  - deploy-to-data-loss
  - data-loss-tests
  - release-data-loss-environment
- name: disable-paranoid
  jobs:
  - claim-bosh-lite-disable-paranoid
  - release-disable-paranoid-environment-manual
  - delete-disable-paranoid-deployment
  - deploy-to-disable-paranoid
  - disable-paranoid-tests
  - release-disable-paranoid-environment
- name: verify-schemas
  jobs:
  - claim-bosh-lite-verify-cluster-schemas
  - release-verify-cluster-schemas-environment-manual
  - delete-verify-cluster-schemas-deployment
  - deploy-to-verify-cluster-schemas
  - verify-cluster-schemas-tests
  - release-verify-cluster-schemas-environment
- name: bosh2.0
  jobs:
  - claim-bosh-lite-bosh-2.0
  - release-bosh-2.0-environment-manual
  - delete-bosh-2.0-deployment
  - deploy-to-bosh-2.0
  - release-bosh-2.0-environment
